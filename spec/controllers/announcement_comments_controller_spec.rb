# == Schema Information
#
# Table name: comments
#
#  id          :integer          not null, primary key
#  type        :string
#  content     :text
#  origin_id   :integer
#  origin_type :string
#  user_id     :integer
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AnnouncementCommentsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # AnnouncementComment. As you add validations to AnnouncementComment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AnnouncementCommentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  # describe 'GET #index' do
  #   it 'assigns all announcement_comments as @announcement_comments' do
  #     announcement_comment = AnnouncementComment.create! valid_attributes
  #     get :index, {}, valid_session
  #     expect(assigns(:announcement_comments)).to eq([announcement_comment])
  #   end
  # end
  #
  # describe 'GET #show' do
  #   it 'assigns the requested announcement_comment as @announcement_comment' do
  #     announcement_comment = AnnouncementComment.create! valid_attributes
  #     get :show, { id: announcement_comment.to_param }, valid_session
  #     expect(assigns(:announcement_comment)).to eq(announcement_comment)
  #   end
  # end
  #
  # describe 'GET #new' do
  #   it 'assigns a new announcement_comment as @announcement_comment' do
  #     get :new, {}, valid_session
  #     expect(assigns(:announcement_comment)).to be_a_new(AnnouncementComment)
  #   end
  # end
  #
  # describe 'GET #edit' do
  #   it 'assigns the requested announcement_comment as @announcement_comment' do
  #     announcement_comment = AnnouncementComment.create! valid_attributes
  #     get :edit, { id: announcement_comment.to_param }, valid_session
  #     expect(assigns(:announcement_comment)).to eq(announcement_comment)
  #   end
  # end
  #
  # describe 'POST #create' do
  #   context 'with valid params' do
  #     it 'creates a new AnnouncementComment' do
  #       expect do
  #         post :create, { announcement_comment: valid_attributes }, valid_session
  #       end.to change(AnnouncementComment, :count).by(1)
  #     end
  #
  #     it 'assigns a newly created announcement_comment as @announcement_comment' do
  #       post :create, { announcement_comment: valid_attributes }, valid_session
  #       expect(assigns(:announcement_comment)).to be_a(AnnouncementComment)
  #       expect(assigns(:announcement_comment)).to be_persisted
  #     end
  #
  #     it 'redirects to the created announcement_comment' do
  #       post :create, { announcement_comment: valid_attributes }, valid_session
  #       expect(response).to redirect_to(AnnouncementComment.last)
  #     end
  #   end
  #
  #   context 'with invalid params' do
  #     it 'assigns a newly created but unsaved announcement_comment as @announcement_comment' do
  #       post :create, { announcement_comment: invalid_attributes }, valid_session
  #       expect(assigns(:announcement_comment)).to be_a_new(AnnouncementComment)
  #     end
  #
  #     it "re-renders the 'new' template" do
  #       post :create, { announcement_comment: invalid_attributes }, valid_session
  #       expect(response).to render_template('new')
  #     end
  #   end
  # end
  #
  # describe 'PUT #update' do
  #   context 'with valid params' do
  #     let(:new_attributes) do
  #       skip('Add a hash of attributes valid for your model')
  #     end
  #
  #     it 'updates the requested announcement_comment' do
  #       announcement_comment = AnnouncementComment.create! valid_attributes
  #       put :update, { id: announcement_comment.to_param, announcement_comment: new_attributes }, valid_session
  #       announcement_comment.reload
  #       skip('Add assertions for updated state')
  #     end
  #
  #     it 'assigns the requested announcement_comment as @announcement_comment' do
  #       announcement_comment = AnnouncementComment.create! valid_attributes
  #       put :update, { id: announcement_comment.to_param, announcement_comment: valid_attributes }, valid_session
  #       expect(assigns(:announcement_comment)).to eq(announcement_comment)
  #     end
  #
  #     it 'redirects to the announcement_comment' do
  #       announcement_comment = AnnouncementComment.create! valid_attributes
  #       put :update, { id: announcement_comment.to_param, announcement_comment: valid_attributes }, valid_session
  #       expect(response).to redirect_to(announcement_comment)
  #     end
  #   end
  #
  #   context 'with invalid params' do
  #     it 'assigns the announcement_comment as @announcement_comment' do
  #       announcement_comment = AnnouncementComment.create! valid_attributes
  #       put :update, { id: announcement_comment.to_param, announcement_comment: invalid_attributes }, valid_session
  #       expect(assigns(:announcement_comment)).to eq(announcement_comment)
  #     end
  #
  #     it "re-renders the 'edit' template" do
  #       announcement_comment = AnnouncementComment.create! valid_attributes
  #       put :update, { id: announcement_comment.to_param, announcement_comment: invalid_attributes }, valid_session
  #       expect(response).to render_template('edit')
  #     end
  #   end
  # end
  #
  # describe 'DELETE #destroy' do
  #   it 'destroys the requested announcement_comment' do
  #     announcement_comment = AnnouncementComment.create! valid_attributes
  #     expect do
  #       delete :destroy, { id: announcement_comment.to_param }, valid_session
  #     end.to change(AnnouncementComment, :count).by(-1)
  #   end
  #
  #   it 'redirects to the announcement_comments list' do
  #     announcement_comment = AnnouncementComment.create! valid_attributes
  #     delete :destroy, { id: announcement_comment.to_param }, valid_session
  #     expect(response).to redirect_to(announcement_comments_url)
  #   end
  # end
end
